import os 
import sys
import platform
import re

platform = platform.platform(terse=1)

if 'VERILATOR_ROOT' in os.environ: _VERILATOR =os.environ['VERILATOR_ROOT']
else: _VERILATOR ='/Users/patriciokaplan/Downloads/verilator-3.846'

libs = Split("boost_python")

if 'BOOST_INCLUDE' in os.environ: libpath=Split(os.environ['BOOST_INCLUDE']+'/stage/lib')
else: libpath=[]

includes = ["include","/usr/include/python2.7", _VERILATOR+'/include']

if 'BOOST_INCLUDE' in os.environ: includes.append(os.environ['BOOST_INCLUDE'])

if 'GEN_TREE' in os.environ: gen_tree=os.environ['GEN_TREE']
else: gen_tree = '/home/patricio/Documents/musings_gen'

gen_tree += '/' + platform + '/verilog/fifo'

verilator_obj_dir      = gen_tree+'/obj_dir'
verilator_obj_dir_dump = gen_tree+'/obj_dir_dump'

if ARGUMENTS.get('dump',0): 
	dump=1
	cppflags=" -DDUMP"
	includes.append(verilator_obj_dir_dump) 
else: 
	cppflags=" -O3"
	dump=0
	includes.append(verilator_obj_dir) 

def verilator_emitter (target, source, env):
	for s in source:
		p = verilator_obj_dir+'/V'+ str(s)[:-2]
		target = [ (p+x) for x in Split('.cpp .h __Syms.cpp __Syms.h') ]
	return target,source

def verilator_dump_emitter (target, source, env):
	for s in source:
		p = verilator_obj_dir_dump +'/V'+ str(s)[:-2]
		target = [ (p+x) for x in Split('.cpp .h __Syms.cpp __Syms.h __Trace.cpp __Trace__Slow.cpp') ]
	return target,source
	


def summarizer(target, source, env):
	print target[0].abspath
	output_file = open(target[0].abspath, 'w') 
	for s in source:
		input_file = open(s.abspath, 'r')
		error=False
		completed=False
		for line in input_file:
			if re.search("ERROR", line):
				error=True
				break
			elif re.search("TEST COMPLETED",line):
				completed=True

		output_file.write(s.abspath)
		if not error and completed: output_file.write(": PASSED\n")
		else: 			    output_file.write(": FAILED\n")
	return None

env = Environment(
                  CPPPATH = includes,
                  CPPFLAGS =cppflags,
                  LIBS = libs,
                  LIBPATH = libpath,
                  FRAMEWORKS = Split("Python"),
                  SHLIBPREFIX = '',
                  SHLIBSUFFIX = '.dylib',
		  BUILDERS={ 'VerilatorDump':Builder(action='verilator --Mdir '+verilator_obj_dir_dump+' --trace --cc $SOURCE', emitter=verilator_dump_emitter)
			   , 'Verilator':    Builder(action='verilator --Mdir '+verilator_obj_dir+' -O3 --cc $SOURCE', emitter=verilator_emitter)
			   , 'Summary':	     Builder(action=summarizer,multi=1)
			   },
		  SRC_TREE=os.getcwd(),
		  GEN_TREE=gen_tree,
		  VERILATOR=_VERILATOR,
		  DUMP=dump,
                )

# copy dynamic libraries paths
for v in Split('DYLD_FALLBACK_LIBRARY_PATH LD_LIBRARY_PATH'): 
	if v in os.environ:
		env['ENV'][v]=os.environ[v]

Export('env')


Repository(env['VERILATOR'])

VariantDir(gen_tree, '.')

if dump: env.VerilatorDump('fifo.v')
else:    env.Verilator('fifo.v')

env.SConscript(gen_tree+'/include/SConscript')
env.SConscript(gen_tree+'/src/SConscript')
env.SConscript('test1/SConscript')

# export this node so tests can add themselves as dependencies
env.Summary(output=gen_tree+'/summary.log')
