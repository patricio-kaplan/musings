from os import *
import sys
import platform

platform = platform.platform(terse=1)

if 'VERILATOR_ROOT' in environ: _VERILATOR =environ['VERILATOR_ROOT']
else: _VERILATOR ='/Users/patriciokaplan/Downloads/verilator-3.846'

libs = Split("boost_python")

if 'BOOST_INCLUDE' in environ: libpath=Split(environ['BOOST_INCLUDE']+'/stage/lib')
else: libpath=[]

includes = ["include","/usr/include/python2.7", _VERILATOR+'/include']

if 'BOOST_INCLUDE' in environ: includes.append(environ['BOOST_INCLUDE'])

if 'GEN_TREE' in environ: gen_tree=environ['GEN_TREE']
else: gen_tree = '/home/patricio/Documents/musings_gen'

gen_tree += '/' + platform + '/verilog/fifo'

verilator_obj_dir = gen_tree+'/obj_dir'

def verilator_emitter (target, source, env):
	for s in source:
		p = verilator_obj_dir+'/V'+ str(s)[:-2]
		target = [ (p+x) for x in Split('.cpp .h __Syms.cpp __Syms.h __Trace.cpp __Trace__Slow.cpp') ]
	return target,source
	
bld = Builder(action='verilator --Mdir '+verilator_obj_dir+' --trace --cc $SOURCE', emitter=verilator_emitter)

env = Environment(
                  CPPPATH = includes,
                  LIBS = libs,
                  LIBPATH = libpath,
                  FRAMEWORKS = Split("Python"),
                  SHLIBPREFIX = '',
                  SHLIBSUFFIX = '.dylib',
		  BUILDERS={'Verilator':bld},
		  SRC_TREE=getcwd(),
		  GEN_TREE=gen_tree,
		  VERILATOR=_VERILATOR,
                )

# copy dynamic libraries paths
for v in Split('DYLD_FALLBACK_LIBRARY_PATH LD_LIBRARY_PATH'): env['ENV'][v]=environ[v]

Export('env')

Repository(env['VERILATOR'])

VariantDir(gen_tree, '.')

env.Verilator('fifo.v')

env.SConscript(gen_tree+'/include/SConscript')
env.SConscript(gen_tree+'/src/SConscript')

env.SConscript('test1/SConscript')
