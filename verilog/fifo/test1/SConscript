Import('env')
import os

gen_tree = env['GEN_TREE']
if env['DUMP']: dump = ' -d '
else: dump=''

sfp = File('test.py').abspath

# path relative to source tree
rp = os.path.dirname(os.path.relpath(sfp, env['SRC_TREE']))

target_dir = gen_tree+'/'+rp
wrap_dir   = gen_tree+'/src'

if dump != '': 	
	targets = [ ( target_dir+'/'+x ) for x in Split('out.log err.log dump.vcd') ]
else:		
	targets = [ ( target_dir+'/'+x ) for x in Split('out.log err.log') ]

if 'PYTHONPATH' in os.environ: pp = wrap_dir+':'+os.environ['PYTHONPATH'] 
else: pp = wrap_dir

print 'pp=',pp

# the following 2 could be combined into a specialized "run_test" builder with its own scanner for external imports dependencies
node = env.Command(targets, 'test.py', [ Mkdir(target_dir), ' cd '+target_dir
							  + ' && '
							  + ' env '
							  + ' PYTHONPATH='+pp
							  + ' time python '+sfp
							  + dump
							  + ' > ${TARGETS[0]} 2> ${TARGETS[1]}' 
					])

if dump != '': 	
	env.Depends(node, [ (wrap_dir+'/'+x+'_wrap.so') for x in Split('fifo verilated verilated_vcd_c') ] )
else:
	env.Depends(node, [ (wrap_dir+'/'+x+'_wrap.so') for x in Split('fifo verilated') ] )

env.AlwaysBuild(targets)
